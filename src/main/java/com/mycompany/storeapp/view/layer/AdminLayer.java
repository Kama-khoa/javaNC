/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.mycompany.storeapp.view.layer;

/**
 * Admin Layout s·ª≠ d·ª•ng component architecture - Optimized Version
 * @author Manh Hung
 */
import com.mycompany.storeapp.view.component.admin.FooterComponent;
import com.mycompany.storeapp.view.component.admin.HeaderComponent;
import com.mycompany.storeapp.view.component.admin.Sidebar;
import com.mycompany.storeapp.view.page.admin.Category.CategoryGUI;
import com.mycompany.storeapp.view.page.admin.Order.OrderKanbanView;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.*;
import java.util.HashMap;
import java.util.Map;

public class AdminLayer extends JFrame {
    // Components
    private HeaderComponent headerComponent;
    private Sidebar sidebarComponent;
    private FooterComponent footerComponent;
    private JPanel mainContentPanel;
    private JPanel currentContentPanel;
    
    // UI Colors
    private static final Color BACKGROUND_COLOR = new Color(248, 250, 252);
    private static final Color CONTENT_BACKGROUND = Color.WHITE;
    private static final Color BORDER_COLOR = new Color(229, 231, 235);
    
    // Content cache ƒë·ªÉ tr√°nh t·∫°o l·∫°i nhi·ªÅu l·∫ßn
    private Map<String, JPanel> contentCache = new HashMap<>();
    
    public AdminLayer() {
        initializeFrame();
        initializeComponents();
        setupLayout();
        setupEventHandlers();
        showDashboard(); // Hi·ªÉn th·ªã trang m·∫∑c ƒë·ªãnh
    }
    
    private void initializeFrame() {
        setTitle("H·ªá th·ªëng qu·∫£n l√Ω c·ª≠a h√†ng");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(1400, 800);
        setLocationRelativeTo(null);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        // Set icon n·∫øu c√≥
        try {
            setIconImage(Toolkit.getDefaultToolkit().getImage("https://res.cloudinary.com/deczn9jtq/image/upload/v1751535499/logo_nhtaxb.png"));
        } catch (Exception e) {
            // Icon kh√¥ng t·ªìn t·∫°i, b·ªè qua
        }
    }
    
    private void initializeComponents() {
        // Initialize header component v·ªõi constructor m·ªõi
        headerComponent = new HeaderComponent();
        
        // Thi·∫øt l·∫≠p logout action cho header
        headerComponent.addLogoutActionListener(e -> handleLogout());
        
        // Initialize sidebar component
        sidebarComponent = new Sidebar();
        
        // Thi·∫øt l·∫≠p menu action listener cho sidebar
        sidebarComponent.setMenuActionListener(this::handleMenuAction);
        
        // Initialize footer component
        footerComponent = new FooterComponent();
        
        // Initialize main content panel
        mainContentPanel = new JPanel(new BorderLayout());
        mainContentPanel.setBackground(CONTENT_BACKGROUND);
        mainContentPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
        
        currentContentPanel = new JPanel(new BorderLayout());
        currentContentPanel.setBackground(CONTENT_BACKGROUND);
        mainContentPanel.add(currentContentPanel, BorderLayout.CENTER);
    }
    
    private void setupLayout() {
        setLayout(new BorderLayout());
        
        // Add components to frame
        add(headerComponent, BorderLayout.NORTH);
        add(sidebarComponent, BorderLayout.WEST);
        add(mainContentPanel, BorderLayout.CENTER);
        add(footerComponent, BorderLayout.SOUTH);
        
        // Set background
        getContentPane().setBackground(BACKGROUND_COLOR);
    }
    
    private void setupEventHandlers() {
        // Window closing event
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                handleWindowClosing();
            }
        });
        
        // Component resize listener for responsive design
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                handleWindowResize();
            }
        });
        
        // Keyboard shortcuts
        setupKeyboardShortcuts();
    }
    
    private void setupKeyboardShortcuts() {
        // Alt + Q ƒë·ªÉ logout
        KeyStroke logoutKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_Q, InputEvent.ALT_DOWN_MASK);
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(logoutKeyStroke, "logout");
        getRootPane().getActionMap().put("logout", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleLogout();
            }
        });
        
        // F11 ƒë·ªÉ toggle fullscreen
        KeyStroke fullscreenKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_F11, 0);
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(fullscreenKeyStroke, "fullscreen");
        getRootPane().getActionMap().put("fullscreen", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                toggleFullscreen();
            }
        });
        // Alt + S ƒë·ªÉ toggle sidebar
        KeyStroke sidebarToggleKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.ALT_DOWN_MASK);
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(sidebarToggleKeyStroke, "toggleSidebar");
        getRootPane().getActionMap().put("toggleSidebar", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sidebarComponent.setCollapsed(!sidebarComponent.isCollapsed());
            }
        });
    }
    
    private void handleWindowClosing() {
        int option = JOptionPane.showConfirmDialog(
            this,
            "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t kh·ªèi h·ªá th·ªëng?",
            "X√°c nh·∫≠n tho√°t",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE
        );
        
        if (option == JOptionPane.YES_OPTION) {
            cleanup();
            dispose();
            System.exit(0);
        }
    }
    
    private void handleWindowResize() {
        // Handle responsive design changes
        Dimension size = getSize();
        
        // Responsive sidebar (n·∫øu SidebarComponent h·ªó tr·ª£)
        if (size.width < 1200) {
            sidebarComponent.setCollapsed(true);
        } else {
            sidebarComponent.setCollapsed(false);
        }
        
        // Responsive content padding
        EmptyBorder padding;
        if (size.width < 800) {
            padding = new EmptyBorder(10, 10, 10, 10);
        } else if (size.width < 1200) {
            padding = new EmptyBorder(15, 15, 15, 15);
        } else {
            padding = new EmptyBorder(20, 20, 20, 20);
        }
        mainContentPanel.setBorder(padding);
    }
    
    private void handleLogout() {
        int option = JOptionPane.showConfirmDialog(
            this,
            "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?",
            "X√°c nh·∫≠n ƒëƒÉng xu·∫•t",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE
        );
        
        if (option == JOptionPane.YES_OPTION) {
            // Clear session data
            cleanup();
            dispose();
            
            // Show login form
            SwingUtilities.invokeLater(() -> {
                // new LoginForm().setVisible(true);
                System.out.println("Redirecting to login...");
            });
        }
    }
    
    private void handleMenuAction(String action) {
        SwingWorker<JPanel, Void> worker = new SwingWorker<JPanel, Void>() {
            @Override
            protected JPanel doInBackground() throws Exception {
                return getOrCreateContent(action);
            }
            
            @Override
            protected void done() {
                try {
                    JPanel content = get();
                    updateMainContent(content);
                } catch (Exception e) {
                    e.printStackTrace();
                    showErrorContent("L·ªói khi t·∫£i n·ªôi dung: " + e.getMessage());
                }
            }
        };
        worker.execute();
    }
    
    private JPanel getOrCreateContent(String action) {
        if (contentCache.containsKey(action)) {
            return contentCache.get(action);
        }

        JPanel content = createContentForAction(action);
        contentCache.put(action, content);
        return content;
    }
    
    private JPanel createContentForAction(String action) {
        switch (action) {
            case "dashboard":
                return createContentPanel("Dashboard", "T·ªïng quan v·ªÅ ho·∫°t ƒë·ªông c·ªßa c·ª≠a h√†ng", "üìä");
            case "notifications":
                return createContentPanel("Th√¥ng b√°o", "Qu·∫£n l√Ω th√¥ng b√°o h·ªá th·ªëng", "üîî");
            case "products":
                return createContentPanel("Qu·∫£n l√Ω s·∫£n ph·∫©m", "Th√™m, s·ª≠a, x√≥a v√† qu·∫£n l√Ω s·∫£n ph·∫©m", "üì¶");
            case "categories":
                return new CategoryGUI();
            case "suppliers":
                return createContentPanel("Qu·∫£n l√Ω nh√† cung c·∫•p", "Th√¥ng tin c√°c nh√† cung c·∫•p", "üöö");
            case "inventory-checks":
                return createContentPanel("Ki·ªÉm kho", "Ki·ªÉm tra v√† qu·∫£n l√Ω t·ªìn kho", "üìã");
            case "sizes":
                return createContentPanel("Qu·∫£n l√Ω k√≠ch th∆∞·ªõc", "Qu·∫£n l√Ω c√°c k√≠ch th∆∞·ªõc s·∫£n ph·∫©m", "üìê");
            case "colors":
                return createContentPanel("Qu·∫£n l√Ω m√†u s·∫Øc", "Qu·∫£n l√Ω b·∫£ng m√†u s·∫£n ph·∫©m", "üé®");
            case "materials":
                return createContentPanel("Qu·∫£n l√Ω ch·∫•t li·ªáu", "Qu·∫£n l√Ω ch·∫•t li·ªáu s·∫£n ph·∫©m", "üßµ");
            case "tags":
                return createContentPanel("Qu·∫£n l√Ω Tag", "Qu·∫£n l√Ω th·∫ª cho s·∫£n ph·∫©m", "üè∑Ô∏è");
            case "orders":
                return new OrderKanbanView();
            case "order-warehouse":
                return createContentPanel("ƒê√≥ng h√†ng", "Qu·∫£n l√Ω vi·ªác ƒë√≥ng g√≥i ƒë∆°n h√†ng", "üì¶");
            case "order-shipping":
                return createContentPanel("V·∫≠n chuy·ªÉn", "Theo d√µi v·∫≠n chuy·ªÉn ƒë∆°n h√†ng", "üöõ");
            case "purchase-orders":
                return createContentPanel("ƒê∆°n nh·∫≠p h√†ng", "Qu·∫£n l√Ω ƒë∆°n h√†ng nh·∫≠p t·ª´ nh√† cung c·∫•p", "üõí");
            case "payment":
                return createContentPanel("Danh s√°ch thanh to√°n", "Qu·∫£n l√Ω c√°c giao d·ªãch thanh to√°n", "üí≥");
            case "reconcile-vnpay":
                return createContentPanel("ƒê·ªëi so√°t VNPay", "ƒê·ªëi so√°t giao d·ªãch v·ªõi VNPay", "üîÑ");
            case "payment-report":
                return createContentPanel("B√°o c√°o thanh to√°n", "Th·ªëng k√™ v√† b√°o c√°o thanh to√°n", "üìä");
            case "customers":
                return createContentPanel("Qu·∫£n l√Ω kh√°ch h√†ng", "Th√¥ng tin v√† l·ªãch s·ª≠ kh√°ch h√†ng", "üë•");
            case "support-requests":
                return createContentPanel("Y√™u c·∫ßu h·ªó tr·ª£", "X·ª≠ l√Ω y√™u c·∫ßu h·ªó tr·ª£ t·ª´ kh√°ch h√†ng", "üéß");
            case "reviews":
                return createContentPanel("Qu·∫£n l√Ω ƒë√°nh gi√°", "Qu·∫£n l√Ω ƒë√°nh gi√° v√† nh·∫≠n x√©t", "‚≠ê");
            case "banners":
                return createContentPanel("Banner khuy·∫øn m√£i", "Qu·∫£n l√Ω banner v√† ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i", "üéØ");
            case "settings":
                return createContentPanel("C√†i ƒë·∫∑t h·ªá th·ªëng", "C·∫•u h√¨nh c√°c thi·∫øt l·∫≠p h·ªá th·ªëng", "‚öôÔ∏è");
            case "staffs":
                return createContentPanel("Qu·∫£n l√Ω nh√¢n vi√™n", "Qu·∫£n l√Ω th√¥ng tin nh√¢n vi√™n", "üë§");
            default:
                return createContentPanel("Dashboard", "T·ªïng quan v·ªÅ ho·∫°t ƒë·ªông c·ªßa c·ª≠a h√†ng", "üìä");
        }
    }
    
    private void showErrorContent(String errorMessage) {
        JPanel errorPanel = new JPanel(new BorderLayout());
        errorPanel.setBackground(CONTENT_BACKGROUND);
        
        JLabel errorLabel = new JLabel("<html><center>" +
                "‚ùå " + errorMessage + "<br><br>" +
                "<span style='color: #9CA3AF; font-size: 12px;'>Vui l√≤ng th·ª≠ l·∫°i sau</span>" +
                "</center></html>", JLabel.CENTER);
        errorLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        errorLabel.setForeground(new Color(239, 68, 68));
        errorLabel.setBorder(new EmptyBorder(40, 20, 40, 20));
        
        errorPanel.add(errorLabel, BorderLayout.CENTER);
        updateMainContent(errorPanel);
    }
    
    public void updateMainContent(JPanel newContent) {
        currentContentPanel.removeAll();
        currentContentPanel.add(newContent, BorderLayout.CENTER);
        currentContentPanel.revalidate();
        currentContentPanel.repaint();
        
        animateContentTransition();
    }
    
    private void animateContentTransition() {
        final int animationDuration = 200;
        final int steps = 10;
        final int stepDelay = animationDuration / steps;

        Timer timer = new Timer(stepDelay, new ActionListener() {
            int step = 0;

            @Override
            public void actionPerformed(ActionEvent e) {
                step++;
                // Add your animation logic here
                if (step >= steps) {
                    ((Timer) e.getSource()).stop();
                }
            }
        });
        timer.start();
    }
    
    /**
     * T·∫°o content panel v·ªõi title v√† description
     */
    private JPanel createContentPanel(String title, String description, String icon) {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(CONTENT_BACKGROUND);

        JPanel headerSection = createContentHeader(title, description, icon);
        panel.add(headerSection, BorderLayout.NORTH);

        JPanel contentArea = new JPanel(new BorderLayout());
        contentArea.setBackground(CONTENT_BACKGROUND);
        contentArea.setBorder(new EmptyBorder(30, 0, 0, 0));

        JPanel placeholderPanel = createPlaceholderContent(title);
        contentArea.add(placeholderPanel, BorderLayout.CENTER);
        
        panel.add(contentArea, BorderLayout.CENTER);
        
        return panel;
    }
    
    private JPanel createContentHeader(String title, String description, String icon) {
        JPanel headerPanel = new JPanel();
        headerPanel.setLayout(new BoxLayout(headerPanel, BoxLayout.Y_AXIS));
        headerPanel.setBackground(CONTENT_BACKGROUND);
        headerPanel.setBorder(new EmptyBorder(0, 0, 20, 0));

        JPanel titlePanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
        titlePanel.setBackground(CONTENT_BACKGROUND);
        
        if (icon != null && !icon.isEmpty()) {
            JLabel iconLabel = new JLabel(icon);
            iconLabel.setFont(new Font("Segoe UI Emoji", Font.PLAIN, 32));
            iconLabel.setSize(20,20);
            iconLabel.setBorder(new EmptyBorder(0, 0, 0, 15));
            titlePanel.add(iconLabel);
        }
        
        JLabel titleLabel = new JLabel(title);
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 28));
        titleLabel.setForeground(new Color(17, 24, 39));
        titlePanel.add(titleLabel);

        JLabel descLabel = new JLabel(description);
        descLabel.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        descLabel.setForeground(new Color(107, 114, 128));
        descLabel.setBorder(new EmptyBorder(10, 0, 0, 0));
        
        headerPanel.add(titlePanel);
        headerPanel.add(descLabel);
        
        return headerPanel;
    }
    
    private JPanel createPlaceholderContent(String pageName) {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(CONTENT_BACKGROUND);
        panel.setBorder(BorderFactory.createLineBorder(BORDER_COLOR, 1));
        
        JLabel label = new JLabel("<html><center>" +
                "üìã N·ªôi dung trang " + pageName + " s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn ·ªü ƒë√¢y<br><br>" +
                "<span style='color: #9CA3AF; font-size: 12px;'>T√≠ch h·ª£p v·ªõi c√°c form v√† component c·ª• th·ªÉ</span>" +
                "</center></html>", JLabel.CENTER);
        label.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        label.setForeground(new Color(156, 163, 175));
        label.setBorder(new EmptyBorder(40, 20, 40, 20));
        
        panel.add(label, BorderLayout.CENTER);
        return panel;
    }
    
    private void showDashboard() {
        handleMenuAction("dashboard");
    }
    
    private void toggleFullscreen() {
        if (getExtendedState() == JFrame.MAXIMIZED_BOTH) {
            setExtendedState(JFrame.NORMAL);
        } else {
            setExtendedState(JFrame.MAXIMIZED_BOTH);
        }
    }
    
    private void cleanup() {
        contentCache.clear();
        
        System.gc();
    }

    public void setUserInfo(String username) {
        headerComponent.setUserInfo(username);
    }
    
    public void setCopyrightText(String text) {
        footerComponent.setCopyrightText(text);
    }
    
    public void setVersionText(String version) {
        footerComponent.setVersionText(version);
    }
    
    public void navigateToPage(String action) {
        handleMenuAction(action);
    }
    
    public void refreshCurrentPage() {
        // Clear cache for current page and reload
        // Implementation depends on how you track current page
    }
    
    public HeaderComponent getHeaderComponent() {
        return headerComponent;
    }
    
    public Sidebar getSidebarComponent() {
        return sidebarComponent;
    }
    
    public FooterComponent getFooterComponent() {
        return footerComponent;
    }
    
    public JPanel getMainContentPanel() {
        return mainContentPanel;
    }
}